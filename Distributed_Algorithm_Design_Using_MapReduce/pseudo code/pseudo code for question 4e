Pseudo Code:
------------

MAP_TOTAL_CHEESE_BURST_PIZZA_LESS_THAN_RS_500 (Key, Value)

START

LS = Split (Value, “\t”)

IS_CHEESE_BURST = LS[6]

PRICE = LS[9]

IF ( IS_CHEESE_BURST == “Y”  AND  PRICE  < 500)

Write (Cheese_Burst_Pizza_Less_Than_500, 1) 

END


REDUCE_TOTAL_CHEESE_BURST_PIZZA_LESS_THAN_RS_500 (Key, ValueList)

START

Count = 0

FOR i = 1 To ValueList.length

Count = Count + 1

Write (Key, Count)

END


Explanation For Map:
--------------------

01. A transaction record is stored in Value. 

02. The Split function extracts 12 values out of the record using a tab delimiter and stores these values in a List LS.

03. The information whether a Pizza is Cheese Burst or Not is available at LS[6].

04. The information regarding the Price of a Pizza is available at LS[9].

05. If IS_CHEESE_BURST is Y and PRICE is less than 500 then the output is written using a Write function. 

06. Cheese_Burst_Pizza_Less_Than_500 is the Key and 1 is the Value.

07. Unlike other algorithms, we have not considered the ORDER_EVENT as the question does not specifically talk about Sold Pizza.

08. The output of this MAP will be aggregated and provided as input to the REDUCE. 

09. For example, the output of the MAP would be (Cheese_Burst_Pizza_Less_Than_500, 1), (Cheese_Burst_Pizza_Less_Than_500, 1)

10. The aggregated result will be (Cheese_Burst_Pizza_Less_Than_500, {1,1})


Explanation For Reduce:
-----------------------

01. The input to the REDUCE would be the aggregated output of the MAP. 

02. For example, (Cheese_Burst_Pizza_Less_Than_500, {1,1})
 
03. The REDUCE will loop through the ValueList and will count the total items in the list.

04. The output of the REDUCE will be Key and Count. 

05. For example, (Cheese_Burst_Pizza_Less_Than_500, 2)
